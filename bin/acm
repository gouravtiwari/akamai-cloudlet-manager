#!/usr/bin/env ruby

require 'akamai_cloudlet_manager'
require 'thor'
require 'json'
require 'terminal-table'

class AkamaiCloudletManagerCli < Thor

  desc "get_policy_versions", "Get all versions of a policy"
  long_desc <<-LONGDESC
  Get the policy versions.
    With --policy_id, policy on which version to be cloned
    LONGDESC
  method_option :policy_id, required: true
  def get_policy_versions
    puts "Policy versions:"
    policy_version = AkamaiCloudletManager::PolicyVersion.new({policy_id: options[:policy_id] })
    rows_title = ['Location','Revision','Description']
    rows = JSON.parse(policy_version.versions).collect {|i| [i['location'], i['revisionId'], i['description']]}
    rows.unshift(rows_title)
    puts Terminal::Table.new rows: rows
  end

  desc "clone_policy_version", "Clones the current policy version"
  long_desc <<-LONGDESC
  Clones the current activated version of a policy. All new updates are performed in cloned version
    With --policy_id, policy on which version to be cloned
    LONGDESC
  method_option :policy_id, required: true
  def clone_policy_version
    policy_version = AkamaiCloudletManager::PolicyVersion.new({policy_id: options[:policy_id] })
    begin
      if !policy_version.versions.empty?
        latest_version = JSON.parse(policy_version.versions).first["version"].to_s
        puts "cloning policy version: #{latest_version}"
        puts policy_version.create(latest_version)
      else
        puts "No policy versions available"
      end
    rescue => err
      puts "cloning failed!"
      puts "Exception: #{err}"
      err
    end
  end

  desc "update_policy_version", "Updates the policy version"
  long_desc <<-LONGDESC
  Updates the policy version. Policy version can be updated only in draft mode, not when it is activated.
    With --policy, policy on which version to be updated
    With --draft_version, version which needs to be updated, this must be inactive version
    With --file_path, file_path from which rules can be constructed and updated to policy version
    With --rule_name, rule name so that it is visible in akamai control panel
    With --origin_id, origin's id, this can be found from "get_policy_versions" command
    With --rule_type, rule type, e.g. "albMatchRule"
    With --cookie_rules, from which cookie rules can be constructed and updated to policy version, e.g. "abc=xyz"

    LONGDESC

  method_option :policy_id,     required: true
  method_option :draft_version, required: true
  method_option :file_path,     required: true
  method_option :rule_name,     required: true
  method_option :origin_id,     required: true
  method_option :rule_type,     required: false
  method_option :cookie_rules,  required: false
  def update_policy_version
    puts "updates the policy version"
    policy_version = AkamaiCloudletManager::PolicyVersion.new({
                                                                policy_id: options[:policy_id],
                                                                version_id: options[:draft_version]
                                                              })
    begin
      puts policy_version.update(options)
    rescue => err
      puts "Exception: #{err.formatted_exception("Policy version update failed!")}"
      err
    end
  end

  desc "activate_policy_version", "Activate the policy version on a given network(staging/production)"
  long_desc <<-LONGDESC
  Activates the policy version
    With --policy_id, policy on which version to be activated
    With --version, version which needs to be activated
    With --network, network on which policy version needs to be activated, e.g. staging/production

    LONGDESC
  method_option :policy_id,  required: true
  method_option :version, required: true
  method_option :network, required: true, enum: ['staging','production']
  def activate_policy_version
    puts "activates the policy version"
    policy_version = AkamaiCloudletManager::PolicyVersion.new({
                                                                policy_id: options[:policy_id],
                                                                version_id: options[:version]
                                                              })
    begin
      puts options[:network]
      puts options[:policy_id]
      puts options[:version]
      puts policy_version.activate(options[:network])
    rescue => err
      puts "activation failed!"
      puts "Exception: #{err}"
      err
    end
  end

end

AkamaiCloudletManagerCli.start(ARGV)
